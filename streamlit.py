import streamlit as st
import pandas as pd
import altair as alt
import plotly.express as px
import streamlit as st
import pandas as pd
import seaborn as sns
import plotly.express as px
import time
from streamlit_extras.metric_cards import style_metric_cards
import plotly.graph_objs as go
from query import query ## Use this when you want query to db
import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder
from joblib import load
import numpy as np




st.set_page_config(
    page_title="CoVid19 Dashboard",
    page_icon="üåç",
    layout="wide",
    initial_sidebar_state="expanded")

alt.themes.enable("dark")

#######################
# CSS styling
st.markdown("""
<style>

[data-testid="block-container"] {
    padding-left: 2rem;
    padding-right: 2rem;
    padding-top: 1rem;
    padding-bottom: 0rem;
    margin-bottom: -7rem;
}

[data-testid="stVerticalBlock"] {
    padding-left: 0rem;
    padding-right: 0rem;
}

[data-testid="stMetric"] {
    background-color: #393939;
    text-align: center;
    padding: 15px 0;
}

[data-testid="stMetricLabel"] {
  display: flex;
  justify-content: center;
  align-items: center;
}

[data-testid="stMetricDeltaIcon-Up"] {
    position: relative;
    left: 38%;
    -webkit-transform: translateX(-50%);
    -ms-transform: translateX(-50%);
    transform: translateX(-50%);
}

[data-testid="stMetricDeltaIcon-Down"] {
    position: relative;
    left: 38%;
    -webkit-transform: translateX(-50%);
    -ms-transform: translateX(-50%);
    transform: translateX(-50%);
}

</style>
""", unsafe_allow_html=True)

alt.themes.enable("dark")

# load data from database
df = query() 

# # load data from csv for streamlit cloud
# file_path = 'data/Clean_Dataset.csv'
# df = pd.read_csv(file_path)
df.columns = df.columns.str.strip().str.lower().str.replace(' ', '_')
df['date'] = pd.to_datetime(df['date'].str.split().str[0], format='%Y-%m-%d')
df['date'] = pd.to_datetime(df['date']).dt.date
unique_dates = df["date"].astype(str).unique()
country_region = df["country_region"].unique()
country_region = np.append(country_region, 'All')
# L·∫•y d·ªØ li·ªáu t·∫°i ng√†y m·ªõi nh·∫•t
top = df[df['date'] == df['date'].max()]

# S·ª≠ d·ª•ng danh s√°ch ƒë·ªÉ ch·ªçn c√°c c·ªôt c·∫ßn nh√≥m
world = top.groupby('country_region')[['confirmed', 'active', 'deaths']].sum().reset_index()

# Hi·ªÉn th·ªã 5 d√≤ng ƒë·∫ßu ti√™n
print(world.head())


# Sidebar
with st.sidebar:
    st.markdown('<h1 style="color:blue;">üèÇ Covid19 Dashboard</h1>', unsafe_allow_html=True)
    # year_list = list(df.date.unique())[::-1]
    
    # selected_year = st.selectbox('Select a year', year_list)
    # df_selected = df[df.airline == selected_year]
    # df_selected_year_sorted = df_selected.sort_values(by="date", ascending=False)
    selected_date_range = st.date_input(
        "Select a date range",
        value=(pd.to_datetime("2020-01-22"), pd.to_datetime("2020-07-27")),
        min_value=df['date'].min(),  # Gi·ªõi h·∫°n ng√†y b·∫Øt ƒë·∫ßu
        max_value=df['date'].max()   # Gi·ªõi h·∫°n ng√†y k·∫øt th√∫c
    )
    select_country = st.selectbox('Select a Country_region', country_region, index=len(country_region) - 1)

    if len(selected_date_range) == 2:  # ƒê·∫£m b·∫£o ng∆∞·ªùi d√πng ƒë√£ ch·ªçn ƒë·ªß 2 ng√†y
        start_date, end_date = selected_date_range
        df_selected = df[(df['date'] >= start_date) & (df['date'] <= end_date)]
        df_selected = df_selected.sort_values(by="date", ascending=False)
        if select_country != 'All':
            df_selected = df_selected[df_selected['country_region'] == select_country]
    else:
        st.warning("Please select a valid date range.")


    

st.header("Covid19 Dashboard üåçüåçüåç")

def Home():
    """
    Display the home page with various analytical metrics and visualizations.
    """
    with st.expander("VIEW EXCEL DATASET"):
        showData = st.multiselect('Filter: ', df_selected.columns.tolist(), default=df_selected.columns.tolist())
        st.dataframe(df_selected[showData], use_container_width=True)

    last_date = df_selected['date'].max()
    df_last_day = df_selected[df_selected['date'] == last_date]
    count_comfirmed = float(df_last_day['confirmed'].sum())  # S·ª≠a l·∫°i t·ª´ 'active' th√†nh 'confirmed'
    count_dead = float(df_last_day['deaths'].sum())
    count_recovered = float(df_last_day['recovered'].sum())
    count_active = float(df_last_day['active'].sum())  # ƒê·∫£m b·∫£o c√≥ c·ªôt 'active' cho s·ªë ca ƒëang ƒëi·ªÅu tr·ªã
    max_confirmed_country = df.loc[df['confirmed'].idxmax()]
    max_confirmed_country = max_confirmed_country['country_region']
    min_confirmed_country = df.loc[df['confirmed'].idxmin()]

    total1, total2, total3, total4, total5, total6 = st.columns(6, gap='small')
    with total1:
        st.info('T·ªïng S·ªë Ca X√°c Nh·∫≠n ƒê∆∞·ª£c Ghi Nh·∫≠n', icon="üíâ")
        st.metric(label="T·ªïng S·ªë Ca X√°c Nh·∫≠n ƒê∆∞·ª£c Ghi Nh·∫≠n", value=f"{count_comfirmed:,.0f}")

    with total2:
        st.info('T·ªïng S·ªë Ca T·ª≠ Vong ƒê∆∞·ª£c Ghi Nh·∫≠n', icon="‚ö∞Ô∏è")
        st.metric(label="T·ªïng S·ªë Ca T·ª≠ Vong ƒê∆∞·ª£c Ghi Nh·∫≠n", value=f"{count_dead:,.0f}")

    with total3:
        st.info('T·ªïng S·ªë Ca Ph·ª•c H·ªìi ƒê∆∞·ª£c Ghi Nh·∫≠n', icon="üíö")
        st.metric(label="T·ªïng S·ªë Ca Ph·ª•c H·ªìi ƒê∆∞·ª£c Ghi Nh·∫≠n", value=f"{count_recovered:,.0f}")

    with total4:
        st.info('T·ªïng S·ªë Ca ƒêang ƒêi·ªÅu Tr·ªã ƒê∆∞·ª£c Ghi Nh·∫≠n', icon="üíä")
        st.metric(label="T·ªïng S·ªë Ca ƒêang ƒêi·ªÅu Tr·ªã ƒê∆∞·ª£c Ghi Nh·∫≠n", value=f"{count_active:,.0f}")

    with total5:
        st.info('Qu·ªëc Gia C√≥ S·ªë Ca Nhi·ªÖm Cao Nh·∫•t', icon="üåç")
        st.metric(label="Qu·ªëc Gia C√≥ S·ªë Ca Cao Nh·∫•t", value=f"{max_confirmed_country}")

    with total6:
        st.info('Qu·ªëc Gia C√≥ S·ªë Ca Nhi·ªÖm Th·∫•p Nh·∫•t', icon="üåè")
        st.metric(label="Qu·ªëc Gia C√≥ S·ªë Ca Th·∫•p Nh·∫•t", value=f"{min_confirmed_country['country_region']}")

    style_metric_cards(background_color="#FFFFFF", border_left_color="#686664", border_color="#000000", box_shadow="#F71938")


Home()

# death chart
# death chart
fig_deaths = px.scatter_geo(world, 
                     locations="country_region", 
                     locationmode='country names', 
                     color="deaths", 
                     hover_name="country_region", 
                     size="confirmed",  # S·ª≠ d·ª•ng c·ªôt 'confirmed' cho k√≠ch th∆∞·ªõc
                     hover_data=['country_region', 'deaths'],
                     projection="natural earth", 
                     title='S·ªë Ca T·ª≠ Vong T·∫°i M·ªói Qu·ªëc Gia',
                     color_continuous_scale='Earth',  # D·∫£i m√†u t·ª± nhi√™n ph√π h·ª£p v·ªõi ch·ªß ƒë·ªÅ ƒë·ªãa c·∫ßu
                     labels={'deaths': 'S·ªë Ca T·ª≠ Vong'},
                     template="plotly",  # Ch·ªß ƒë·ªÅ s√°ng
                     )
fig_deaths.update_geos(showcoastlines=True, coastlinecolor="Black", showland=True, landcolor="lightgray")
fig_deaths.update_layout(
    title=dict(font=dict(size=20, family="Arial", color="black"), x=0.5),  # Ti√™u ƒë·ªÅ m√†u ƒëen v√† cƒÉn gi·ªØa
    margin={"r":0,"t":40,"l":0,"b":0},  # ƒêi·ªÅu ch·ªânh l·ªÅ ƒë·ªÉ t·ªëi ∆∞u h√≥a kh√¥ng gian
    font=dict(color="black")  # M√†u ch·ªØ l√† ƒëen ƒë·ªÉ d·ªÖ ƒë·ªçc tr√™n n·ªÅn s√°ng
)





# confirmed chart
top = df[df['date'] == df['date'].max()]
top_casualities = top.groupby(by = 'country_region')['confirmed'].sum().sort_values(ascending = False).head(20).reset_index()

df1 = df.copy()
df1['date'] = pd.to_datetime(df1['date']).dt.strftime('%m/%d/%Y')
df1 = df1.fillna('-')

    # T·∫°o bi·ªÉu ƒë·ªì v·ªõi c·∫£i ti·∫øn
fig = px.density_mapbox(
    df1,
    lat='lat',
    lon='long',
    z='confirmed',
    radius=25,  # TƒÉng b√°n k√≠nh ƒë·ªÉ l√†m n·ªïi b·∫≠t c√°c v√πng
    zoom=2,  # Zoom v·ª´a ph·∫£i ƒë·ªÉ xem chi ti·∫øt h∆°n
    hover_data=["country_region", 'province_state', "confirmed"],  # Th√¥ng tin hi·ªÉn th·ªã khi di chu·ªôt
    mapbox_style="open-street-map",  # ƒê·ªïi n·ªÅn b·∫£n ƒë·ªì
    animation_frame='date',
    range_color=[0, 15000],  # M·ªü r·ªông d·∫£i m√†u
    title='Spread of Covid-19 Over Time',
    color_continuous_scale='Earth',  # Gi·ªØ nguy√™n d·∫£i m√†u 'Earth' nh∆∞ b·∫°n ƒë√£ ch·ªçn
)

# C·∫≠p nh·∫≠t b·ªë c·ª•c bi·ªÉu ƒë·ªì
fig.update_layout(
    margin={"r": 10, "t": 50, "l": 10, "b": 10},
    title_font=dict(size=24, color='darkblue', family='Arial'),
    coloraxis_colorbar=dict(
        title="Confirmed Cases",
        tickvals=[0, 5000, 10000, 15000],
        ticktext=["Low", "Moderate", "High", "Very High"]
    ),
    width=800,  # ƒêi·ªÅu ch·ªânh chi·ªÅu r·ªông c·ªßa b·∫£n ƒë·ªì (c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh theo k√≠ch th∆∞·ªõc mong mu·ªën)
    height=600,  # ƒêi·ªÅu ch·ªânh chi·ªÅu cao c·ªßa b·∫£n ƒë·ªì
)

st.plotly_chart(fig, use_container_width=True)

col = st.columns((5,5), gap='medium')
with col[0]:
    plt.figure(figsize=(15, 10))
    plt.xticks(fontsize=15)
    plt.yticks(fontsize=15)
    plt.xlabel("Total cases", fontsize=30)
    plt.ylabel('Country', fontsize=30)
    plt.title("Top 20 Qu·ªëc Gia C√≥ S·ªë Ca Nhi·ªÖm Nhi·ªÅu Nh·∫•t", fontsize=30)
    
    ax = sns.barplot(x=top_casualities.confirmed, y=top_casualities.country_region)
    
    # Th√™m gi√° tr·ªã v√†o t·ª´ng thanh c·ªßa bi·ªÉu ƒë·ªì
    for i, (value, name) in enumerate(zip(top_casualities.confirmed, top_casualities.country_region)):
        ax.text(value, i - .05, f'{value:,.0f}', size=10, ha='left', va='center')

    # Thi·∫øt l·∫≠p l·∫°i nh√£n
    ax.set(xlabel='Total cases', ylabel='Country')

    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì trong Streamlit
    st.pyplot(plt)
with col[1]:
    st.plotly_chart(fig_deaths, use_container_width=True)

china = df[df.country_region == 'China']
china = china.groupby(by='date')[['recovered', 'deaths', 'confirmed', 'active']].sum().reset_index()
# N·∫øu date ƒë√£ l√† Timestamp, b·∫°n kh√¥ng c·∫ßn d√πng strptime n·ªØa
china['date'] = pd.to_datetime(china['date'])
us = df[df.country_region == 'US']
us = us.groupby(by='date')[['recovered', 'deaths', 'confirmed', 'active']].sum().reset_index()
us = us.iloc[33:].reset_index().drop('index', axis=1)
us['date'] = pd.to_datetime(us['date'])  # Convert date column to datetime
vietnam = df[df.country_region == 'Vietnam']
vietnam = vietnam.groupby(by='date')[['recovered', 'deaths', 'confirmed', 'active']].sum().reset_index()
vietnam = vietnam.iloc[9:].reset_index().drop('index', axis=1)
vietnam['date'] = pd.to_datetime(vietnam['date'])  # Convert date column to datetime
india = df[df.country_region == 'India']
india = india.groupby(by='date')[['recovered', 'deaths', 'confirmed', 'active']].sum().reset_index()
india = india.iloc[8:].reset_index().drop('index', axis=1)
india['date'] = pd.to_datetime(india['date'])  # Convert date column to datetime

df.columns = df.columns.str.strip().str.lower().str.replace(' ', '_')

# Chuy·ªÉn c·ªôt 'date' th√†nh ki·ªÉu chu·ªói (n·∫øu ch∆∞a l√† chu·ªói)
df['date'] = pd.to_datetime(df['date'])

# L·ªçc d·ªØ li·ªáu cho Hoa K·ª≥, Trung Qu·ªëc v√† ·∫§n ƒê·ªô
df_us = df[df['country_region'] == 'US']
df_cn = df[df['country_region'] == 'China']
df_in = df[df['country_region'] == 'India']
df_vn = df[df['country_region'] == 'Vietnam']

# V·∫Ω bi·ªÉu ƒë·ªì
plt.figure(figsize=(10, 6))
plt.plot(df_us['date'], df_us['confirmed'], label='Hoa K·ª≥', color='blue')
plt.plot(df_cn['date'], df_cn['confirmed'], label='Trung Qu·ªëc', color='red')
plt.plot(df_in['date'], df_in['confirmed'], label='·∫§n ƒê·ªô', color='green')
plt.plot(df_vn['date'], df_vn['confirmed'], label='Vi·ªát Nam', color='yellow')
# Th√™m ti√™u ƒë·ªÅ v√† nh√£n
plt.title('So s√°nh s·ªë ca nhi·ªÖm COVID-19 gi·ªØa Hoa K·ª≥, Trung Qu·ªëc, ·∫§n ƒê·ªô v√† Vi·ªát Nam')
plt.xlabel('Ng√†y')
plt.ylabel('S·ªë ca nhi·ªÖm')
plt.legend()

# Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
plt.xticks(rotation=45)
plt.tight_layout()
st.pyplot(plt)

col = st.columns(2, gap='medium')

# C·ªôt ƒë·∫ßu ti√™n
with col[0]:
    # T·∫°o bi·ªÉu ƒë·ªì cho Vi·ªát Nam
    plt.figure(figsize=(10,6))
    sns.pointplot(x=vietnam.date.dt.isocalendar().week, y=vietnam.confirmed)
    plt.title("VietNam's Confirmed Cases Over Time", fontsize=25)
    plt.xlabel('No. of Weeks', fontsize=15)
    plt.ylabel('Total cases', fontsize=15)
    st.pyplot(plt)

# C·ªôt th·ª© hai
with col[1]:
    # T·∫°o bi·ªÉu ƒë·ªì cho Trung Qu·ªëc
    plt.figure(figsize=(10,6))
    sns.pointplot(x=china.date.dt.isocalendar().week, y=china.confirmed)
    plt.title("China's Confirmed Cases Over Time", fontsize=25)
    plt.xlabel('No. of Weeks', fontsize=15)
    plt.ylabel('Total cases', fontsize=15)
    st.pyplot(plt)

# Chia layout th√†nh hai c·ªôt cho c√°c bi·ªÉu ƒë·ªì c√≤n l·∫°i
col = st.columns(2, gap='medium')

# C·ªôt ƒë·∫ßu ti√™n
with col[0]:
    # T·∫°o bi·ªÉu ƒë·ªì cho M·ªπ
    plt.figure(figsize=(10,6))
    sns.pointplot(x=us.date.dt.isocalendar().week, y=us.confirmed)
    plt.title("US's Confirmed Cases Over Time", fontsize=25)
    plt.xlabel('No. of Weeks', fontsize=15)
    plt.ylabel('Total cases', fontsize=15)
    st.pyplot(plt)

# C·ªôt th·ª© hai
with col[1]:
    # T·∫°o bi·ªÉu ƒë·ªì cho ·∫§n ƒê·ªô
    plt.figure(figsize=(10,6))
    sns.pointplot(x=india.date.dt.isocalendar().week, y=india.confirmed)
    plt.title("India's Confirmed Cases Over Time", fontsize=25)
    plt.xlabel('No. of Weeks', fontsize=15)
    plt.ylabel('Total cases', fontsize=15)
    st.pyplot(plt)